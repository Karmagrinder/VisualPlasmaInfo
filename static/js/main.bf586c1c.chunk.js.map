{"version":3,"sources":["res/sineWave.svg","components/OpzBuddy/OpzBuddy.js","components/OpzBuddyPrivacyPolicy/OpzBuddyPrivacyPolicy.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","OpzBuddy","props","Media","Body","OpzBuddyPrivacyPolicy","className","App","src","logo","alt","Container","Row","Col","to","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,sC,uQCkE5BC,EA7DE,SAAAC,GAAK,OACrB,6BACC,kBAACC,EAAA,EAAD,KACC,kBAACA,EAAA,EAAMC,KAAP,KACC,mDACA,0IAEC,6BACA,8BAED,2DACA,iDACA,gKAEC,6BAFD,4DAIC,8BAGD,iDACA,gMAGC,8BAED,6BACA,4CACA,oZAGC,8BAED,6BACA,8CACA,wPAGC,8BAED,iCCFWC,G,MArCe,SAAAH,GAAK,OAClC,yBAAKI,UAAU,kBACd,kBAACH,EAAA,EAAD,KACC,kBAACA,EAAA,EAAMC,KAAP,KACC,yDACA,+LAGA,kKAGA,sMAGA,uH,+CCkBWG,MA1Bf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKD,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKE,IAAKC,IAAMH,UAAU,WAAWI,IAAI,SACzC,6BACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAK,kBAAC,IAAD,CAAMC,GAAI,YAAaR,UAAU,YAAjC,eACL,kBAACO,EAAA,EAAD,KAAK,kBAAC,IAAD,CAAMC,GAAI,0BAA2BR,UAAU,YAA/C,kCAMb,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOS,KAAK,YAAYC,UAAWf,IACnC,kBAAC,IAAD,CAAOc,KAAK,0BAA0BC,UAAWX,QClBvCY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bf586c1c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sineWave.fba70051.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './OpzBuddy.scss';\nimport Media from 'react-bootstrap/Media';\n\nconst OpzBuddy = props => (\n\t<div>\n\t\t<Media>\n\t\t\t<Media.Body>\n\t\t\t\t<h3>OP-Z Buddy App Help</h3>\n\t\t\t\t<p>\n\t\t\t\t\tThis app provides display, audio/video recording and data backup functionality for Teenage Engineering OP-Z.\n\t\t\t\t\t<br/>\n\t\t\t\t\t<br/> \n\t\t\t\t</p>\n\t\t\t\t<h5>1. CONNECTING OP-Z TO PHONE</h5>\n\t\t\t\t<h6>a) Via Bluetooth:</h6>\n\t\t\t\t<p>\n\t\t\t\t\tYou can use one of the many available Bluetooth-MIDI apps on the Google App store for connecting OP-Z to your phone via bluetooth.\n\t\t\t\t\t<br />\n\t\t\t\t\tLaunch the app only after OP-Z is connected to the phone.\n\t\t\t\t\t<br />\t\t\t\t\t\n\t\t\t\t</p>\n\n\t\t\t\t<h6>b) Via USB-Cable:</h6>\n\t\t\t\t<p>\n\t\t\t\t\tWait for 2-3 seconds after OP-Z has booted up and then connect OP-Z to your phone via USB-OTG adapter.\n\t\t\t\t\tAlso ensure that your phone supports USB-OTG functionality.\n\t\t\t\t\t<br /> \n\t\t\t\t</p>\n\t\t\t\t<br />\n\t\t\t\t<h5>2. RECORDER:</h5>\n\t\t\t\t<p>\n\t\t\t\t\tTo enable audio/video recording functionality you must connect OP-Z via USB-Cable. When the App detects OP-Z as audio device, the recording features will be enabled.\n\t\t\t\t\tAudio is recorded in WAV(stereo) format with 16 BIT and 44.1K hz sampling frequency. Video is recorded in MPEG4 format and audio is encoded in AAC with same bit depth and sampling frequency as audio-recorder.\n\t\t\t\t\t<br /> \n    \t\t\t</p>\n\t\t\t\t<br />\n\t\t\t\t<h5>3. DATA BACKUP</h5>\n\t\t\t\t<p>\t\t\t\t\t\n\t\t\t\t\tWhen OP-Z is connected in content disk-mode, app will enable the data-backup feature. Backups of OP-Z data are stored in the device internal memory. \n\t\t\t\t\tYou can create backup via direct folder copy or create a zip-archive.\n\t\t\t\t\t<br /> \n\t\t\t\t</p>\n\t\t\t\t<br />\n\t\t\t</Media.Body>\n\t\t</Media>\n\n\t</div>\n);\n\n// todo: Unless you need to use lifecycle methods or local state,\n// write your component in functional form as above and delete\n// this section. \n// class OpzBuddy extends React.Component {\n//   render() {\n//     return <div>This is a component called OpzBuddy.</div>;\n//   }\n// }\n\nconst OpzBuddyPropTypes = {\n\t// always use prop types!\n};\n\nOpzBuddy.propTypes = OpzBuddyPropTypes;\n\nexport default OpzBuddy;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './OpzBuddyPrivacyPolicy.scss';\nimport Media from 'react-bootstrap/Media';\n\nconst OpzBuddyPrivacyPolicy = props => (\n\t<div className=\"Privacy-policy\">\n\t\t<Media>\n\t\t\t<Media.Body>\n\t\t\t\t<h4>OP-Z Buddy Privacy Policy</h4>\n\t\t\t\t<p>\n\t\t\t\t\tOP-Z Buddy app, does not collect or store user's data other than the internal memory of the device on which application is running (i.e user's personal device).\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tApp listens to MIDI data received from a specific type of device (OP-Z Synth by Teenage Engineering) and visualizes the parameters.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tApp also requires microphone, camera, and internal/external memory access on user's device, this is to provide audio/video recording and data backup(locally) features.\n    \t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tOP-Z Buddy does not access any other audio device other Teenage Engineering's OP-Z.\t\t\n\t\t\t\t</p>\n\t\t\t</Media.Body>\n\t\t</Media>\n\t</div>\n);\n\n// todo: Unless you need to use lifecycle methods or local state,\n// write your component in functional form as above and delete\n// this section. \n// class OpzBuddyPrivacyPolicy extends React.Component {\n//   render() {\n//     return <div>This is a component called OpzBuddyPrivacyPolicy.</div>;\n//   }\n// }\n\nconst OpzBuddyPrivacyPolicyPropTypes = {\n\t// always use prop types!\n};\n\nOpzBuddyPrivacyPolicy.propTypes = OpzBuddyPrivacyPolicyPropTypes;\n\nexport default OpzBuddyPrivacyPolicy;\n","import React from 'react';\nimport logo from './res/sineWave.svg';\nimport './App.css';\nimport OpzBuddy from './components/OpzBuddy/OpzBuddy'\nimport OpzBuddyPrivacyPolicy from './components/OpzBuddyPrivacyPolicy/OpzBuddyPrivacyPolicy'\nimport Home from './components/Home/Home'\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <div>\n            <Container>\n              <Row>\n                <Col><Link to={'/opzbuddy'} className=\"nav-link\">OP-Z Buddy</Link></Col>\n                <Col><Link to={'/opzbuddy/privacypolicy'} className=\"nav-link\">OP-Z Buddy Privacy Policy</Link></Col>\n              </Row>\n            </Container> \n          </div>\n        </header>\n\n        <hr />\n        <Switch>\n          <Route path='/opzbuddy' component={OpzBuddy} />\n          <Route path='/opzbuddy/privacypolicy' component={OpzBuddyPrivacyPolicy} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}