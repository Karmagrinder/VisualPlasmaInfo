{"version":3,"sources":["res/Screenshot4.jpg","res/seeTheSound_logo_nobkgnd.svg","res/Screenshot.jpg","res/Screenshot3.jpg","res/Screenshot5.jpg","res/Screenshot6.jpg","res/Screenshot8.jpg","res/UserGuide1.png","res/UserGuide2.png","res/ConnectionDiag.png","components/VisualPlasma/VisualPlasma.js","components/PrivacyPolicy/PrivacyPolicy.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","VisualPlasma","props","Media","Body","Card","bg","text","Title","className","Text","href","alt","src","width","height","allowfullscreen","Subtitle","Img","variant","Screenshot","Screenshot_ActionTypes","Screenshot_MediaAction","Screenshot_FxTypes","Screenshot_MidiNote","Screenshot_loadMappings","UserGuide1","UserGuide2","ConnectionDiag","PrivacyPolicy","style","App","logo","Container","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.abe4607c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Screenshot4.9eb6e32f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/seeTheSound_logo_nobkgnd.ae2bd75d.svg\";","module.exports = __webpack_public_path__ + \"static/media/Screenshot.a04d17e3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Screenshot3.a5817eaf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Screenshot5.1bc76800.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Screenshot6.a1405940.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Screenshot8.63d56ec6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/UserGuide1.83f0fe8d.png\";","module.exports = __webpack_public_path__ + \"static/media/UserGuide2.3df2039a.png\";","module.exports = __webpack_public_path__ + \"static/media/ConnectionDiag.71b95cee.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './VisualPlasma.scss';\nimport Media from 'react-bootstrap/Media';\nimport Card from 'react-bootstrap/Card';\nimport ResponsiveEmbed from 'react-responsive-embed';\n\n// Image  imports\nimport Screenshot from '../../res/Screenshot.jpg';\nimport Screenshot_MidiNote from '../../res/Screenshot3.jpg';\nimport Screenshot_MediaAction from '../../res/Screenshot4.jpg';\nimport Screenshot_ActionTypes from '../../res/Screenshot5.jpg';\nimport Screenshot_FxTypes from '../../res/Screenshot6.jpg';\nimport Screenshot_loadMappings from '../../res/Screenshot8.jpg';\nimport UserGuide1 from '../../res/UserGuide1.png';\nimport UserGuide2 from '../../res/UserGuide2.png';\nimport ConnectionDiag from '../../res/ConnectionDiag.png';\n\nconst demoVideoUrl = \"https://www.youtube.com/embed/aMXpVZAsE_M\";\nconst googlePlayStoreURL = \"https://play.google.com/store/apps/details?id=com.e.VisualPlasma\";\n\n// 646 x 250\n\nconst VisualPlasma = props => (\n\t<div>\n\t\t<Media>\n\t\t\t<Media.Body>\n\t\t\t\t<Card bg=\"dark\" text=\"light\">\n\t\t\t\t\t<Card.Title className=\"title-text\">VisualPlasma App Help</Card.Title>\n\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t<Card.Text className=\"general-text\">\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tThis app generates visuals triggered by MIDI signals.\n\t\t\t\t\t\t\tIn order to use this app, it is required that you make yorself familier with basic concepts of MIDI.\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t<div className=\"play-store-link\">\n\t\t\t\t\t\t\t<a href='https://play.google.com/store/apps/details?id=com.e.VisualPlasma&pcampaignid=pcampaignidMKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'>\n\t\t\t\t\t\t\t\t<img alt='Get it on Google Play' src='https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png'\n\t\t\t\t\t\t\t\t\twidth={215}\n\t\t\t\t\t\t\t\t\theight={80}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div >\n\t\t\t\t\t\t\t<ResponsiveEmbed src={demoVideoUrl} allowfullscreen />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Card.Body>\n\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t<Card bg=\"dark\" text=\"light\">\n\t\t\t\t\t\t\t<Card.Title className=\"title-text\" >1. CONNECTING MIDI DEVICE</Card.Title>\n\t\t\t\t\t\t\t<Card.Subtitle className=\"subtitle-text\">a) Supported devices:</Card.Subtitle>\n\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t<Card.Text className=\"general-text\">\n\t\t\t\t\t\t\t\t\tYou should be able to use any class complaint MIDI device.\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t\t</Card.Body>\n\n\t\t\t\t\t\t\t<Card.Subtitle className=\"subtitle-text\">a) Via Bluetooth:</Card.Subtitle>\n\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t<Card.Text className=\"general-text\">\n\t\t\t\t\t\t\t\t\tIf your  MIDI device and your phone both  support MIDI over bluetooh you can connect your MIDI device wirelessly.\n\t\t\t\t\t\t\t\t\tYou can use any of the available Bluetooth-MIDI apps on the google play store and connect your device to the  phone. \n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\tLaunch the app only after your MIDI device is connected to the phone.\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t<Card.Subtitle className=\"subtitle-text\">b) Via USB-Cable:</Card.Subtitle>\n\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t<Card.Text className=\"general-text\">\n\t\t\t\t\t\t\t\t\tConnect the MIDI device to your phone via USB-OTG adapter.\n\t\t\t\t\t\t\t\t\tAlso ensure that your phone supports USB-OTG functionality.\n\t\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t<Card.Img variant=\"bottom\" src={Screenshot} />\n\t\t\t\t\t\t</Card>\t\t\t\t\t\t\n\t\t\t\t\t\t<Card bg=\"dark\" text=\"light\">\n\t\t\t\t\t\t\t<Card.Title className=\"title-text\">2. MAPPINGS:</Card.Title>\n\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t<Card.Text className=\"general-text\">\n\t\t\t\t\t\t\t\t\tA mapping is a binding  between a MIDI-note /signal and an action.\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\tThere are  two types of action a MIDI-note can be binded to, namely a) FX. b) Media.\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\tA mapping has following properties:\n\t\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t\t<li> a) MIDI-note </li>\n\t\t\t\t\t\t\t\t\t\t<li> b) MIDI-Channel </li>\n\t\t\t\t\t\t\t\t\t\t<li> c) Type (FX or Media)</li>\n\t\t\t\t\t\t\t\t\t\t<li> d) FxName / Media resource name</li>\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t# A combination of a MIDI-note and channel can be associated only to one mapping.\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t\t\t<Card.Img variant=\"bottom\" src={Screenshot_ActionTypes} />\n\n\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t<Card.Subtitle className=\"subtitle-text\">2.1 Media:</Card.Subtitle>\n\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t<Card.Text className=\"general-text\">\n\t\t\t\t\t\t\t\t\tWhen a MIDI-note is mapped to action of type \"Media\", the visuals will be generated with the associated media file.\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\tCurrently only Images, and  GIFs are  supported as media types.\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t\t\t<Card.Img variant=\"bottom\" src={Screenshot_MediaAction} />\n\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t<Card.Subtitle className=\"subtitle-text\">2.2 FX:</Card.Subtitle>\n\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t<Card.Text className=\"general-text\">\n\t\t\t\t\t\t\t\t\tThis action applies the selected image-manipulation effect on to the currently active  media when it's associated MIDI note is triggered. \n\t\t\t\t\t\t\t\t\t<br />\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t\t\t<Card.Img variant=\"bottom\" src={Screenshot_FxTypes} />\n\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t<Card.Subtitle className=\"subtitle-text\">2.3 Create mapping:</Card.Subtitle>\n\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t<Card.Text className=\"general-text\">\n\t\t\t\t\t\t\t\t\tFollow these steps to create a mapping:\n\t\t\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t\t<li>Press a kep/pad to trigger a MIDI note. The triggered note and channel will be displayed.</li>\n\t\t\t\t\t\t\t\t\t\t<li>Select type of trigger: FX or Media\n\t\t\t\t\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Type-Fx: Select  one  of the available FX fromt he dropdown menu.</li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li> Type-Media: If you click on the Midia button, app will propmt a  file picket. You can then select an image or GIF file.</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t<li>Press  the add button (+) to save create the mapping.</li>\n\t\t\t\t\t\t\t\t\t\t<li>Mapping will be displayed on  the table view.</li>\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\tRefer to the layout guide mentioned in section 4.1\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t\t\t<Card.Img variant=\"bottom\" src={Screenshot_MidiNote} />\n\t\t\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t\t\t<Card.Img variant=\"bottom\" src={Screenshot_MediaAction} />\n\t\t\t\t\t\t\t</Card.Body>\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<Card.Subtitle className=\"subtitle-text\">2.4 Save mappings to file:</Card.Subtitle>\n\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t<Card.Text className=\"general-text\">\n\t\t\t\t\t\t\t\t\tIf any mappings are available, the \"save\" button will become active, you can press the save button, and the mappings will be saved to a file.\n\t\t\t\t\t\t\t\t\tThese saved mappings can be later recalled and loaded.\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\tRefer to the layout guide mentioned in section 4.1\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t<Card.Subtitle className=\"subtitle-text\">2.5 Load mappings from file:</Card.Subtitle>\n\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t<Card.Text className=\"general-text\">\n\t\t\t\t\t\t\t\t\tIf any mappings file are available, they will be displayed on the top left corner of the screen.\n\t\t\t\t\t\t\t\t\tYou can select any of the previously saved mappings file from the dropdown menu, and  press the \"Load\" button.\n\t\t\t\t\t\t\t\t\tThe mappings from the file will be displayed on the table view.\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\tRefer to the layout guide mentioned in section 4.1\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t\t\t<Card.Img variant=\"bottom\" src={Screenshot_loadMappings} />\n\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t<Card.Subtitle className=\"subtitle-text\">2.6 Edit mapping:</Card.Subtitle>\n\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t<Card.Text className=\"general-text\">\n\t\t\t\t\t\t\t\t\tTo edit a mapping, select the mapping in the table-view, the table view is scrollable. \n\t\t\t\t\t\t\t\t\tThe edit option will be activated on the screen wht the mapping is selected, also the mapping will be highlighted.\n\t\t\t\t\t\t\t\t\tUse the same procedure as \"Create a mapping\", and press  the edit button instead of the add (+) button.\n\t\t\t\t\t\t\t\t\tThe selected mapping will be updated with the new changes.\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\tRefer to the layout guide mentioned in section 4.2\n\t\t\t\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t<Card.Subtitle className=\"subtitle-text\">2.7 Delete mapping:</Card.Subtitle>\n\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t<Card.Text className=\"general-text\">\n\t\t\t\t\t\t\t\t\tWhen you select the mapping in the mappings-table, the delete-button will become active, you can perform the delete action and the mapping will be removed.\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\tRefer to the layout guide mentioned in section 4.2\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t<Card bg=\"dark\" text=\"light\">\n\t\t\t\t\t\t\t<Card.Title className=\"title-text\">3. Start Visuals</Card.Title>\n\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t<Card.Text className=\"general-text\">\n\t\t\t\t\t\t\t\t\tPress on the \"Eye\" button to start the visuals. Press any of the mapped keys to trigger visuals.\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\tThe FX visuals are applied only if there is any media being displayed.\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\tFX actions are applied only to still images, and are skipped if a GIF is active. \t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t</Card>\n\n\t\t\t\t\t\t<Card bg=\"dark\" text=\"light\">\n\t\t\t\t\t\t\t<Card.Title className=\"title-text\">4. UI Layout:</Card.Title>\n\t\t\t\t\t\t\t<Card.Subtitle className=\"subtitle-text\"> 4.1 Mappings configurator</Card.Subtitle>\n\t\t\t\t\t\t\t<Card.Img variant=\"top\" src={UserGuide1} />\n\t\t\t\t\t\t\t<Card.Subtitle className=\"subtitle-text\"> 4.2 Edit/Delete operations </Card.Subtitle>\n\t\t\t\t\t\t\t<Card.Img variant=\"top\" src={UserGuide2} />\n\t\t\t\t\t\t</Card>\n\n\t\t\t\t\t\t<Card bg=\"dark\" text=\"light\">\n\t\t\t\t\t\t\t<Card.Title className=\"title-text\">5. Connectiong external screen/projector:</Card.Title>\n\t\t\t\t\t\t\t<Card.Subtitle className=\"subtitle-text\"> </Card.Subtitle>\n\t\t\t\t\t\t\t<Card.Img variant=\"top\" src={ConnectionDiag} />\n\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t<Card.Text className=\"general-text\">\n\t\t\t\t\t\t\t\t\tYou can use a external docking station or port-replicator like Kingston Nucleam to connect an external monitor/screen/projector.\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<Card bg=\"dark\" text=\"light\">\n\t\t\t\t\t\t\t<Card.Title className=\"title-text\">6. Supported devices</Card.Title>\n\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t<Card.Text className=\"general-text\">\n\t\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t\t\tSamsung s20, works with USB-OTG. Bluetooth MIDI  not working.\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t\t\tHonor 8, works with both Bluetooth MIDI and  USB-OTG\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t\t</Card.Body>\t\t\t\t\t\t\t\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Card.Body>\n\t\t\t\t</Card>\t\n\t\t\t</Media.Body>\n\t\t</Media>\n\n\t</div>\n);\n\n\n\nconst VisualPlasmaPropTypes = {\n\t// always use prop types!\n};\n\nVisualPlasma.propTypes = VisualPlasmaPropTypes;\n\nexport default VisualPlasma;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './PrivacyPolicy.scss';\nimport Media from 'react-bootstrap/Media';\nimport Card from 'react-bootstrap/Card';\n\nconst PrivacyPolicy = props => (\n\t<div className=\"Privacy-policy\">\n\t\t<Media>\n\t\t\t<Media.Body style={{height:'100vh'}}>\n\t\t\t\t<Card bg=\"dark\" text=\"light\">\n\t\t\t\t\t<Card.Title className=\"title-text\"> Privacy Policy </Card.Title>\n\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t<Card.Text className=\"general-text\">\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\tVisualPlasma app, does not collect or store user's data.\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\tThe only data that the app has access to are the images files that the user has explicitly selected and provided access. \n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\tAnd these images are stored in app's local cache/files directory (i.e user's personal device).\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\tAll the local cache/files directory of the app will be deleted when the app in uninstalled from the device.\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\tApp listens to MIDI data received from a device selected by user and generates visuals based on the input received.\t\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\tApp also requires MIDI, and internal/external memory access on user's device, this is to save the app settings on the local cache folder.\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\tApp also requires internet access in order to display the help-guide and the app privacy-policy.\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t</Card.Body>\n\t\t\t\t</Card>\t\t\t\t\n\t\t\t</Media.Body>\n\t\t</Media>\n\t</div>\n);\n\n\n\nconst PrivacyPolicyPropTypes = {\n\t// always use prop types!\n};\n\nPrivacyPolicy.propTypes = PrivacyPolicyPropTypes;\n\nexport default PrivacyPolicy;\n","import React from 'react';\nimport logo from './res/seeTheSound_logo_nobkgnd.svg';\nimport './App.css';\nimport VisualPlasma from './components/VisualPlasma/VisualPlasma'\nimport PrivacyPolicy from './components/PrivacyPolicy/PrivacyPolicy'\nimport { HashRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport Container from 'react-bootstrap/Container';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <div>\n            <Container className=\"navigation-container\">\n              <div><Link to='/' className=\"nav-link\">VisualPlasma</Link></div>\n              <div><Link to='/privacypolicy' className=\"nav-link\">Privacy-policy</Link></div>\n            </Container> \n          </div>\n        </header>\n\n        <hr />\n        <Switch>\n          <Route exact path='/'component={VisualPlasma} />\n          <Route path= '/privacypolicy' component={PrivacyPolicy} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}